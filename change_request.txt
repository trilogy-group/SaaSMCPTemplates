Start working:
- Transition the given issue to in progress

Troubleshoot:
- Read and analyze the Jira issue description to understand the AWS service, resource, and nature of the problem. Derive the required action (e.g., reboot, stop, start, describe, diagnose, log check) based on context.
- Use the `aws_cli_pipeline` tool without timeout to perform actions. Required fields:
    - `account_id`: extract from the issue
    - `region`: extract from the issue
    - `command`: construct based on the inferred action and AWS resource
- Extract relevant identifiers from the issue such as:
    - instance ID or resource ID
    - service name (e.g., EC2, Lambda, CloudWatch)
    - alarm name or CloudWatch namespace (if applicable)
    - timestamps or state change indicators
- Based on the context, determine the AWS action is needed:
    - Reboot, stop, or start EC2 instances
    - Check logs for Lambda or ECS
    - Fetch alarm state for CloudWatch issues
    - Diagnose using logs from CloudWatch Log Group or Namespace
    - Perform the action mentioned as per the context.
- If logs or monitoring data are missing, attempt to query using `filter-log-events` under the CloudWatch namespace or known log groups.
- Construct and run minimal AWS CLI commands using `aws_cli_pipeline` tool.
- Follow this output structure and add a comment in jira:
     - "Actions taken:"
     - "Findings:"
     - "Result:"
     - "Next steps:"
     - "Security check: MCP rules followed"

Close Issue:
Before transitioning, fill in the following required fields on the issue:
    - Change Result => customfield_10131  
        - Use one of the following:
            - Successful → {'id': '10162'}   ← DEFAULT
            - Rolled Back → {'id': '10163'}
            - Failed → {'id': '10164'}
            - Cancelled → {'id': '10165'}
            - Rejected → {'id': '10166'}
    - Documentation Updated => customfield_10116  
        - Use one of the following:
            - Yes → {'id': '10095'}
            - No → {'id': '10096'}
            - No docs changes required → {'id': '10151'}   ← DEFAULT
            - Other documentation required → {'id': '10152'}
            - UI change → {'id': '10153'}
    - Notification Sent => customfield_10129  
        - Use one of the following:
            - Yes → {'id': '10154'}   ← DEFAULT
            - No → {'id': '10155'}
    - Monitoring Implemented => customfield_10117  
        - Use one of the following:
            - Yes → {'id': '10158'}   ← DEFAULT
            - No → {'id': '10159'}
    - Smoke Tests => customfield_10144  
        - Use one of the following:
            - Not Performed → {'id': '10167'}
            - Passed → {'id': '10168'}   ← DEFAULT
            - Failed → {'id': '10169'}
   - Resolution Summary (customfield_10112)
        - Use the following text:
            - Closed by Jira MCP
- Transition the Issue
   - Once all fields are filled:
   - Perform the "Deliver" transition. This transition has ID: 161 . This will move the issue to the "Closed" status.

Block issue:
- Add a comment explaining why the issue is being blocked
- Transition the given issue to in progress Blocked

Unblock issue:
- Add a comment explaining why the issue is being unblocked
- Transition the issue status to In Queue.



